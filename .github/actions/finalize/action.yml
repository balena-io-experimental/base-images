name: "Autogenerate"
description: "Download and commit Dockerfiles"
inputs:
  json:
    description: "JSON stringified object containing all the inputs from the calling workflow"
    required: true
  secrets:
    description: "JSON stringified object containing all the secrets from the calling workflow"
    required: true
  variables:
    description: "JSON stringified object containing all the variables from the calling workflow"
    required: true
runs:
  using: "composite"
  steps:
    - name: Check for GitHub App private key
      id: gh_app_private_key
      shell: bash
      run: |
        if [ -n '${{ fromJSON(inputs.secrets).GH_APP_PRIVATE_KEY }}' ]
        then
          echo 'found=true' >> $GITHUB_OUTPUT
        else
          echo 'found=false' >> $GITHUB_OUTPUT
        fi

    # https://github.com/marketplace/actions/github-app-token
    - name: Generate GitHub App installation token
      uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0
      if: steps.gh_app_private_key.outputs.found == 'true'
      id: gh_app_installation_token
      with:
        app_id: ${{ fromJSON(inputs.json).app_id }}
        installation_id: ${{ fromJSON(inputs.json).installation_id }}
        private_key: ${{ fromJSON(inputs.secrets).GH_APP_PRIVATE_KEY }}
        permissions: ${{ fromJSON(inputs.json).token_scope }}

    # https://github.com/crazy-max/ghaction-import-gpg
    - name: Import GPG private key
      id: import-gpg
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549 # v5.2.0
      with:
        gpg_private_key: ${{ fromJSON(inputs.secrets).GPG_PRIVATE_KEY }}
        passphrase: ${{ fromJSON(inputs.secrets).GPG_PASSPHRASE }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    # https://github.com/dawidd6/action-download-artifact
    - name: Download artifacts from PR workflow
      uses: dawidd6/action-download-artifact@5e780fc7bbd0cac69fc73271ed86edf5dcb72d67 # v2
      with:
        github_token: ${{ steps.gh_app_installation_token.outputs.token || fromJSON(inputs.secrets).FLOWZONE_TOKEN }}
        commit: ${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
        path: ${{ runner.temp }}
        workflow_conclusion: success

    - name: Apply and push patches
      shell: bash
      env:
        GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
      run: |
        git am ${{ runner.temp }}/patches-${{ github.event.pull_request.head.sha }}/patches/*.patch
        git push origin HEAD:refs/heads/${{ github.base_ref }}

    # https://github.com/actions/checkout
    - name: Checkout official-images
      uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3
      with:
        token: ${{ steps.gh_app_installation_token.outputs.token || fromJSON(inputs.secrets).FLOWZONE_TOKEN }}
        repository: balena-io-library/official-images
        ref: master
        path: official-images

    - name: Commit and push official-images
      shell: bash
      working-directory: official-images
      env:
        GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
      run: |
        git rm -q -rf library
        tar xzf ${{ runner.temp }}/libs-${{ github.event.pull_request.head.sha }}/libs.tgz -C library
        git add library
        git commit -m "Autogenerated libs" -m "[skip ci]"
        git push origin HEAD:refs/heads/master
