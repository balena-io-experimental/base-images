name: "Autogenerate"
description: "Generate and publish libraries"
inputs:
  json:
    description: "JSON stringified object containing all the inputs from the calling workflow"
    required: true
  secrets:
    description: "JSON stringified object containing all the secrets from the calling workflow"
    required: true
  variables:
    description: "JSON stringified object containing all the variables from the calling workflow"
    required: true
runs:
  using: "composite"
  steps:
    - name: Check which files were modified
      shell: bash
      id: should_publish
      env:
        GH_PAGER: "cat"
        GH_PROMPT_DISABLED: "true"
        GH_REPO: "${{ github.repository }}"
        GH_TOKEN: "${{ fromJSON(inputs.secrets).GITHUB_TOKEN }}"
      run: |
        if [[ $(gh pr diff ${{ github.event.pull_request.number }} --name-only) =~ ^scripts\/ ]]
        then
          echo "result=true" >> $GITHUB_OUTPUT 
        else
          echo "result=false" >> $GITHUB_OUTPUT
        fi

    # https://github.com/actions/setup-node
    - name: Setup Node.js 18.x
      if: steps.should_publish.outputs.result == 'true'
      uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
      with:
        node-version: 18.x

    - name: Install dependencies
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: npm ci

    - name: Generate dockerfiles
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: npm run all

    - name: Generate docs
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: npm run all-dockerhub

    - name: Generate bakefiles
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: npm run all-lib

    - name: Generate workflows
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: npm run all-workflows

    - name: Commit and create patch
      if: steps.should_publish.outputs.result == 'true'
      continue-on-error: true
      shell: bash
      env:
        GIT_AUTHOR_NAME: github-actions[bot]
        GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions[bot]
        GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
      run: |
        git add -A balena-base-images library .github/workflows
        git commit -m "Autogenerated libraries" -m "[skip ci]"
        git format-patch -k -s HEAD^ -o ${{ runner.temp }}/patches

    # https://github.com/actions/upload-artifact
    - name: Upload patches artifact
      if: steps.should_publish.outputs.result == 'true'
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
      with:
        name: patches-${{ github.event.pull_request.head.sha }}
        path: ${{ runner.temp }}/patches
        retention-days: 90
