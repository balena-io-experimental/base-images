name: "Autogenerate"
description: "Generate and publish libraries"
inputs:
  json:
    description: "JSON stringified object containing all the inputs from the calling workflow"
    required: true
  secrets:
    description: "JSON stringified object containing all the secrets from the calling workflow"
    required: true
  variables:
    description: "JSON stringified object containing all the variables from the calling workflow"
    required: true
runs:
  using: "composite"
  steps:
    - name: Check which files were modified
      shell: bash
      id: should_publish
      env:
        GH_PAGER: "cat"
        GH_PROMPT_DISABLED: "true"
        GH_REPO: "${{ github.repository }}"
        GH_TOKEN: "${{ fromJSON(inputs.secrets).GITHUB_TOKEN }}"
      run: |
        if [[ $(gh pr diff ${{ github.event.pull_request.number }} --name-only) =~ scripts\/ ]]
        then
          echo "result=true" >> $GITHUB_OUTPUT 
        else
          # TODO: set back to false to avoid always building
          echo "result=true" >> $GITHUB_OUTPUT
        fi

    # https://github.com/actions/setup-node
    - name: Setup Node.js 18.x
      if: steps.should_publish.outputs.result == 'true'
      uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
      with:
        node-version: 18.x

    - name: Install dependencies
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: npm ci

    - name: Generate dockerfiles
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: |
        npm run all >/dev/null

    - name: Generate docs
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: |
        npm run all-dockerhub >/dev/null

    - name: Generate bakefiles
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: |
        npm run all-lib >/dev/null

    - name: Generate workflows
      if: steps.should_publish.outputs.result == 'true'
      shell: bash
      run: |
        npm run all-workflows >/dev/null

    # We need a token with contents:write and workflows:write permissions
    # so the automatic GITHUB_TOKEN won't work
    # https://github.com/tibdex/github-app-token
    - name: Generate GitHub App installation token
      if: steps.should_publish.outputs.result == 'true'
      uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
      id: gh_app_token
      with:
        app_id: "400994"
        installation_retrieval_mode: organization
        installation_retrieval_payload: ${{ github.event.repository.owner.login }}
        private_key: ${{ fromJSON(inputs.secrets).BALENALIB_BOT_PRIVATE_KEY }}
        repositories: >
          ["${{ github.event.repository.name }}"]

    # https://github.com/orgs/community/discussions/50055
    # https://www.levibotelho.com/development/commit-a-file-with-the-github-api/
    - name: Create blobs and tree objects
      if: steps.should_publish.outputs.result == 'true'
      id: create_tree
      shell: bash
      env:
        GH_DEBUG: "true"
        GH_PAGER: "cat"
        GH_PROMPT_DISABLED: "true"
        GH_REPO: "${{ github.repository }}"
        GH_TOKEN: ${{ steps.gh_app_token.outputs.token }}
      run: |
        # Temporary array to hold our new tree objects
        declare -a tree_array

        # Use git status to check for new and modified files
        modified_files=$(git diff --name-only ; git ls-files --others --exclude-standard)

        # Extract changes
        for file in $modified_files; do

          echo "Creating blob of file $file..."
          base64 -w0 "$file" > content.base64
          response=$(gh api -X POST /repos/$GH_REPO/git/blobs \
            -F 'content=@content.base64' \
            -F 'encoding=base64')
          rm content.base64

          echo "$response" | jq .
          blob_sha=$(echo $response | jq -r .sha)

          # Add blob to our tree
          tree_array+=("{\"path\":\"$file\",\"mode\":\"100644\",\"type\":\"blob\",\"sha\":\"$blob_sha\"}")
        done

        # Get the SHA of the tree the parent commit points to
        base_tree_sha=$(git show -s --format=%T ${{ github.event.pull_request.head.sha }})

        # Create JSON array for tree creation
        tree_json=$(printf ",%s" "${tree_array[@]}")
        tree_json=${tree_json:1}
        tree_json="[$tree_json]"
        tree_json="{\"tree\": $tree_json, \"base_tree\": \"$base_tree_sha\"}"

        echo "Creating tree..."
        echo "$tree_json" | jq .

        response=$(echo $tree_json | gh api -X POST /repos/$GH_REPO/git/trees --input -)

        echo "$response" | jq .
        echo "sha=$(echo $response | jq -r .sha)" >> $GITHUB_OUTPUT
        echo "json=$(echo $response | jq -c .)" >> $GITHUB_OUTPUT

    # https://docs.github.com/en/rest/git/commits?apiVersion=2022-11-28#create-a-commit
    - name: Create commit object
      if: steps.create_tree.outputs.sha != ''
      id: create_commit
      shell: bash
      env:
        GH_DEBUG: "true"
        GH_PAGER: "cat"
        GH_PROMPT_DISABLED: "true"
        GH_REPO: "${{ github.repository }}"
        GH_TOKEN: ${{ steps.gh_app_token.outputs.token }}
        MESSAGE: Autogenerated libraries\n\n[skip ci]
      run: |
        response=$(gh api -X POST /repos/$GH_REPO/git/commits \
          -F "message=$MESSAGE" \
          -F "tree=${{ steps.create_tree.outputs.sha }}" \
          -F "parents[]=${{ github.event.pull_request.head.sha }}")

        echo "$response" | jq .
        echo "sha=$(echo $response | jq -r .sha)" >> $GITHUB_OUTPUT
        echo "json=$(echo $response | jq -c .)" >> $GITHUB_OUTPUT

    # https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#update-a-reference
    - name: Update branch reference
      if: steps.create_commit.outputs.sha != ''
      shell: bash
      env:
        GH_DEBUG: "true"
        GH_PAGER: "cat"
        GH_PROMPT_DISABLED: "true"
        GH_REPO: "${{ github.repository }}"
        GH_TOKEN: ${{ steps.gh_app_token.outputs.token }}
      run: |
        gh api \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/$GH_REPO/git/refs/heads/${{ github.head_ref }} \
          -f sha='${{ steps.create_commit.outputs.sha }}' \
          -F force=true \
          --include
